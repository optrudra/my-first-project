<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive User Journey Mapper</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            padding: 20px;
            min-height: 100vh;
        }

        .journey-container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 32px;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .header p {
            font-size: 18px;
            opacity: 0.9;
        }

        .persona-section {
            padding: 30px;
            background: #f8f9ff;
            border-bottom: 1px solid #e0e4e7;
        }

        .persona-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .persona-header h2 {
            font-size: 24px;
            color: #333;
        }

        .add-persona-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 12px 24px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .add-persona-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .persona-tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            overflow-x: auto;
            padding-bottom: 10px;
        }

        .persona-tab {
            background: white;
            border: 2px solid #e0e4e7;
            border-radius: 8px;
            padding: 8px 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            white-space: nowrap;
            font-size: 14px;
            font-weight: 500;
        }

        .persona-tab.active {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }

        .persona-tab:hover {
            border-color: #667eea;
        }

        .persona-card {
            display: flex;
            align-items: center;
            gap: 20px;
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.08);
        }

        .persona-avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea, #764ba2);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 36px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .persona-avatar:hover {
            transform: scale(1.1);
        }

        .persona-info h3 {
            font-size: 24px;
            color: #333;
            margin-bottom: 8px;
        }

        .persona-details {
            display: flex;
            gap: 30px;
            margin-top: 15px;
            flex-wrap: wrap;
        }

        .persona-detail {
            flex: 1;
            min-width: 200px;
        }

        .persona-detail h4 {
            font-size: 14px;
            color: #666;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 5px;
        }

        .persona-detail p {
            color: #333;
            font-size: 16px;
        }

        .persona-actions {
            margin-left: auto;
            display: flex;
            gap: 10px;
        }

        .edit-btn, .delete-btn {
            padding: 8px 12px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .edit-btn {
            background: #f0f9ff;
            color: #0284c7;
            border: 1px solid #bae6fd;
        }

        .delete-btn {
            background: #fef2f2;
            color: #dc2626;
            border: 1px solid #fecaca;
        }

        .edit-btn:hover {
            background: #0284c7;
            color: white;
        }

        .delete-btn:hover {
            background: #dc2626;
            color: white;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 0;
            border-radius: 20px;
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
            animation: modalSlideIn 0.3s ease-out;
        }

        @keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-50px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal-header {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 20px 30px;
            border-radius: 20px 20px 0 0;
            position: relative;
        }

        .modal-header h2 {
            font-size: 24px;
            margin-bottom: 5px;
        }

        .close {
            position: absolute;
            right: 20px;
            top: 20px;
            color: white;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            transition: opacity 0.3s ease;
        }

        .close:hover {
            opacity: 0.7;
        }

        .modal-body {
            padding: 30px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }

        .form-group input,
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e4e7;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus,
        .form-group textarea:focus,
        .form-group select:focus {
            outline: none;
            border-color: #667eea;
        }

        .form-group textarea {
            resize: vertical;
            min-height: 80px;
        }

        .form-row {
            display: flex;
            gap: 15px;
        }

        .form-row .form-group {
            flex: 1;
        }

        .submit-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 15px 30px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            width: 100%;
            transition: all 0.3s ease;
        }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .journey-map {
            padding: 0;
            overflow-x: auto;
        }

        .journey-phases {
            display: flex;
            min-width: 1200px;
        }

        .phase {
            flex: 1;
            border-right: 1px solid #e0e4e7;
            min-height: 600px;
        }

        .phase:last-child {
            border-right: none;
        }

        .phase-header {
            background: #667eea;
            color: white;
            padding: 20px;
            text-align: center;
            position: relative;
        }

        .phase-header h3 {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 5px;
        }

        .phase-header p {
            font-size: 14px;
            opacity: 0.9;
        }

        .phase-content {
            padding: 20px;
        }

        .section {
            margin-bottom: 25px;
        }

        .section h4 {
            font-size: 14px;
            color: #666;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .touchpoint, .action, .emotion, .pain-point, .opportunity {
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .touchpoint {
            background: #f0f7ff;
            border: 1px solid #d4edff;
            color: #2563eb;
        }

        .action {
            background: #f0fdf4;
            border: 1px solid #dcfce7;
            color: #16a34a;
        }

        .emotion {
            background: #fef3c7;
            border: 1px solid #fde68a;
            color: #d97706;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .emotion-indicator {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            background: white;
        }

        .pain-point {
            background: #fef2f2;
            border: 1px solid #fecaca;
            color: #dc2626;
        }

        .opportunity {
            background: #f0f9ff;
            border: 1px solid #bae6fd;
            color: #0284c7;
        }

        .touchpoint:hover, .action:hover, .emotion:hover, .pain-point:hover, .opportunity:hover {
            transform: scale(1.02);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        .empty-state {
            text-align: center;
            padding: 40px;
            color: #666;
        }

        .empty-state h3 {
            font-size: 20px;
            margin-bottom: 10px;
        }

        .empty-state p {
            font-size: 16px;
            opacity: 0.7;
        }

        .avatar-picker {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin-top: 10px;
        }

        .avatar-option {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea, #764ba2);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            cursor: pointer;
            border: 3px solid transparent;
            transition: all 0.3s ease;
        }

        .avatar-option:hover {
            transform: scale(1.1);
        }

        .avatar-option.selected {
            border-color: #667eea;
            box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.3);
        }

        @media (max-width: 768px) {
            .persona-details {
                flex-direction: column;
                gap: 15px;
            }
            
            .form-row {
                flex-direction: column;
            }
            
            .modal-content {
                width: 95%;
                margin: 10% auto;
            }
        }
    </style>
</head>
<body>
    <div class="journey-container">
        <!-- Header -->
        <div class="header">
            <h1>Interactive User Journey Mapper</h1>
            <p>Create, customize, and analyze user journeys for your digital platform</p>
        </div>

        <!-- Persona Section -->
        <div class="persona-section">
            <div class="persona-header">
                <h2>User Personas</h2>
                <button class="add-persona-btn" onclick="openPersonaModal()">
                    <span>+</span>
                    Add New Persona
                </button>
            </div>

            <div class="persona-tabs" id="personaTabs">
                <!-- Persona tabs will be dynamically added here -->
            </div>

            <div id="personaContent">
                <div class="empty-state">
                    <h3>No Personas Created Yet</h3>
                    <p>Click "Add New Persona" to create your first user persona and start mapping their journey</p>
                </div>
            </div>
        </div>

        <!-- Journey Map -->
        <div class="journey-map" id="journeyMap" style="display: none;">
            <div class="journey-phases" id="journeyPhases">
                <!-- Journey phases will be dynamically generated -->
            </div>
        </div>
    </div>

    <!-- Persona Modal -->
    <div id="personaModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle">Add New Persona</h2>
                <span class="close" onclick="closePersonaModal()">&times;</span>
            </div>
            <div class="modal-body">
                <form id="personaForm">
                    <div class="form-group">
                        <label>Avatar</label>
                        <div class="avatar-picker">
                            <div class="avatar-option selected" data-avatar="👩‍💼">👩‍💼</div>
                            <div class="avatar-option" data-avatar="👨‍💻">👨‍💻</div>
                            <div class="avatar-option" data-avatar="👩‍🎓">👩‍🎓</div>
                            <div class="avatar-option" data-avatar="👨‍🏫">👨‍🏫</div>
                            <div class="avatar-option" data-avatar="👩‍⚕️">👩‍⚕️</div>
                            <div class="avatar-option" data-avatar="👨‍🎨">👨‍🎨</div>
                            <div class="avatar-option" data-avatar="👩‍🔬">👩‍🔬</div>
                            <div class="avatar-option" data-avatar="👨‍🍳">👨‍🍳</div>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="personaName">Name *</label>
                            <input type="text" id="personaName" required placeholder="e.g., Sarah Chen">
                        </div>
                        <div class="form-group">
                            <label for="personaAge">Age</label>
                            <input type="number" id="personaAge" placeholder="e.g., 28">
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="personaRole">Role/Occupation</label>
                        <input type="text" id="personaRole" placeholder="e.g., Marketing Manager">
                    </div>

                    <div class="form-group">
                        <label for="personaDescription">Description</label>
                        <textarea id="personaDescription" placeholder="Brief description of this persona..."></textarea>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="personaDemographics">Demographics</label>
                            <input type="text" id="personaDemographics" placeholder="e.g., 28, Urban, Tech-savvy">
                        </div>
                        <div class="form-group">
                            <label for="personaTechComfort">Tech Comfort Level</label>
                            <select id="personaTechComfort">
                                <option value="Low">Low</option>
                                <option value="Medium">Medium</option>
                                <option value="High">High</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="personaGoals">Goals & Motivations</label>
                        <textarea id="personaGoals" placeholder="What are they trying to achieve? What motivates them?"></textarea>
                    </div>

                    <div class="form-group">
                        <label for="personaPainPoints">Pain Points & Frustrations</label>
                        <textarea id="personaPainPoints" placeholder="What challenges do they face? What frustrates them?"></textarea>
                    </div>

                    <div class="form-group">
                        <label for="personaContext">Usage Context</label>
                        <textarea id="personaContext" placeholder="When, where, and how do they use your platform?"></textarea>
                    </div>

                    <button type="submit" class="submit-btn">
                        <span id="submitBtnText">Create Persona</span>
                    </button>
                </form>
            </div>
        </div>
    </div>
    

    <script>
        // Global variables
        let personas = [];
        let currentPersonaIndex = 0;
        let editingPersonaId = null;
        let selectedAvatar = '👩‍💼';

        // Default journey structure
        const defaultJourneyPhases = [
            {
                name: 'Discovery',
                description: 'Becoming aware of the need',
                touchpoints: [],
                actions: [],
                emotions: [],
                painPoints: [],
                opportunities: []
            },
            {
                name: 'Consideration',
                description: 'Evaluating options',
                touchpoints: [],
                actions: [],
                emotions: [],
                painPoints: [],
                opportunities: []
            },
            {
                name: 'Onboarding',
                description: 'First experience',
                touchpoints: [],
                actions: [],
                emotions: [],
                painPoints: [],
                opportunities: []
            },
            {
                name: 'Usage',
                description: 'Regular interaction',
                touchpoints: [],
                actions: [],
                emotions: [],
                painPoints: [],
                opportunities: []
            },
            {
                name: 'Advocacy',
                description: 'Sharing experience',
                touchpoints: [],
                actions: [],
                emotions: [],
                painPoints: [],
                opportunities: []
            }
        ];

        // Initialize the application
        function init() {
            setupAvatarPicker();
            setupFormSubmission();
            loadSampleData();
        }

        // Setup avatar picker
        function setupAvatarPicker() {
            document.querySelectorAll('.avatar-option').forEach(option => {
                option.addEventListener('click', function() {
                    document.querySelectorAll('.avatar-option').forEach(opt => opt.classList.remove('selected'));
                    this.classList.add('selected');
                    selectedAvatar = this.dataset.avatar;
                });
            });
        }

        // Setup form submission
        function setupFormSubmission() {
            document.getElementById('personaForm').addEventListener('submit', function(e) {
                e.preventDefault();
                savePersona();
            });
        }

        // Open persona modal
        function openPersonaModal(personaId = null) {
            const modal = document.getElementById('personaModal');
            const form = document.getElementById('personaForm');
            const modalTitle = document.getElementById('modalTitle');
            const submitBtn = document.getElementById('submitBtnText');

            if (personaId !== null) {
                // Edit mode
                editingPersonaId = personaId;
                modalTitle.textContent = 'Edit Persona';
                submitBtn.textContent = 'Update Persona';
                populateForm(personas[personaId]);
            } else {
                // Add mode
                editingPersonaId = null;
                modalTitle.textContent = 'Add New Persona';
                submitBtn.textContent = 'Create Persona';
                form.reset();
                selectedAvatar = '👩‍💼';
                document.querySelectorAll('.avatar-option').forEach(opt => opt.classList.remove('selected'));
                document.querySelector('.avatar-option[data-avatar="👩‍💼"]').classList.add('selected');
            }

            modal.style.display = 'block';
        }

        // Close persona modal
        function closePersonaModal() {
            document.getElementById('personaModal').style.display = 'none';
        }

        // Populate form with persona data
        function populateForm(persona) {
            document.getElementById('personaName').value = persona.name;
            document.getElementById('personaAge').value = persona.age || '';
            document.getElementById('personaRole').value = persona.role || '';
            document.getElementById('personaDescription').value = persona.description || '';
            document.getElementById('personaDemographics').value = persona.demographics || '';
            document.getElementById('personaTechComfort').value = persona.techComfort || 'Medium';
            document.getElementById('personaGoals').value = persona.goals || '';
            document.getElementById('personaPainPoints').value = persona.painPoints || '';
            document.getElementById('personaContext').value = persona.context || '';
            
            selectedAvatar = persona.avatar || '👩‍💼';
            document.querySelectorAll('.avatar-option').forEach(opt => opt.classList.remove('selected'));
            document.querySelector(`[data-avatar="${selectedAvatar}"]`).classList.add('selected');
        }

        // Save persona
        function savePersona() {
            const formData = {
                id: editingPersonaId !== null ? editingPersonaId : Date.now(),
                avatar: selectedAvatar,
                name: document.getElementById('personaName').value,
                age: document.getElementById('personaAge').value,
                role: document.getElementById('personaRole').value,
                description: document.getElementById('personaDescription').value,
                demographics: document.getElementById('personaDemographics').value,
                techComfort: document.getElementById('personaTechComfort').value,
                goals: document.getElementById('personaGoals').value,
                painPoints: document.getElementById('personaPainPoints').value,
                context: document.getElementById('personaContext').value,
                journey: generatePersonalizedJourney(document.getElementById('personaGoals').value, document.getElementById('personaPainPoints').value)
            };

            if (editingPersonaId !== null) {
                // Update existing persona
                personas[editingPersonaId] = formData;
            } else {
                // Add new persona
                personas.push(formData);
                currentPersonaIndex = personas.length - 1;
            }

            closePersonaModal();
            renderPersonas();
            renderJourney();
        }

        // Generate personalized journey based on goals and pain points
        function generatePersonalizedJourney(goals, painPoints) {
            const journey = JSON.parse(JSON.stringify(defaultJourneyPhases));
            
            // Customize journey based on goals and pain points
            if (goals) {
                const goalKeywords = goals.toLowerCase();
                
                if (goalKeywords.includes('quick') || goalKeywords.includes('fast')) {
                    journey[0].touchpoints.push('Speed-focused search results');
                    journey[2].painPoints.push('Long onboarding process');
                    journey[2].opportunities.push('Streamlined quick-start flow');
                }
                
                if (goalKeywords.includes('convenient') || goalKeywords.includes('easy')) {
                    journey[0].touchpoints.push('User-friendly interface preview');
                    journey[3].actions.push('Uses simplified workflows');
                    journey[3].opportunities.push('One-click shortcuts for common tasks');
                }
            }
            
            if (painPoints) {
                const painKeywords = painPoints.toLowerCase();
                
                if (painKeywords.includes('time') || painKeywords.includes('busy')) {
                    journey[1].painPoints.push('Too many features to evaluate');
                    journey[1].opportunities.push('Clear feature comparison');
                    journey[3].actions.push('Looks for time-saving features');
                }
                
                if (painKeywords.includes('complex') || painKeywords.includes('difficult')) {
                    journey[2].painPoints.push('Interface seems overwhelming');
                    journey[2].opportunities.push('Progressive disclosure of features');
                    journey[3].emotions.push('😰 Anxious about making mistakes');
                }
            }
            
            return journey;
        }

        // Render personas
        function renderPersonas() {
            const tabsContainer = document.getElementById('personaTabs');
            const contentContainer = document.getElementById('personaContent');
            
            if (personas.length === 0) {
                tabsContainer.innerHTML = '';
                contentContainer.innerHTML = `
                    <div class="empty-state">
                        <h3>No Personas Created Yet</h3>
                        <p>Click "Add New Persona" to create your first user persona and start mapping their journey</p>
                    </div>
                `;
                document.getElementById('journeyMap').style.display = 'none';
                return;
            }
            
            // Render tabs
            tabsContainer.innerHTML = personas.map((persona, index) => `
                <div class="persona-tab ${index === currentPersonaIndex ? 'active' : ''}" 
                     onclick="switchPersona(${index})">
                    ${persona.avatar} ${persona.name}
                </div>
            `).join('');
            
            // Render current persona content
            const currentPersona = personas[currentPersonaIndex];
            contentContainer.innerHTML = `
                <div class="persona-card">
                    <div class="persona-avatar">${currentPersona.avatar}</div>
                    <div class="persona-info">
                        <h3>${currentPersona.name}</h3>
                        <p>${currentPersona.description || 'No description provided'}</p>
                        <div class="persona-details">
                            <div class="persona-detail">
                                <h4>Demographics</h4>
                                <p>${currentPersona.demographics || 'Not specified'}</p>
                            </div>
                            <div class="persona-detail">
                                <h4>Goals</h4>
                                <p>${currentPersona.goals || 'Not specified'}</p>
                            </div>
                            <div class="persona-detail">
                                <h4>Pain Points</h4>
                                <p>${currentPersona.painPoints || 'Not specified'}</p>
                            </div>
                            <div class="persona-detail">
                                <h4>Tech Comfort</h4>
                                <p>${currentPersona.techComfort || 'Medium'}</p>
                            </div>
                        </div>
                    </div>
                    <div class="persona-actions">
                        <button class="edit-btn" onclick="openPersonaModal(${currentPersonaIndex})">Edit</button>
                        <button class="delete-btn" onclick="deletePersona(${currentPersonaIndex})">Delete</button>
                    </div>
                </div>
            `;
            
            document.getElementById('journeyMap').style.display = 'block';
        }

        // Switch persona
        function switchPersona(index) {
            currentPersonaIndex = index;
            renderPersonas();
            renderJourney();
        }

        // Delete persona
        function deletePersona(index) {
            if (confirm('Are you sure you want to delete this persona?')) {
                personas.splice(index, 1);
                if (currentPersonaIndex >= personas.length) {
                    currentPersonaIndex = Math.max(0, personas.length - 1);
                }
                renderPersonas();
                if (personas.length > 0) {
                    renderJourney();
                }
            }
        }

        // Render journey map
       function renderJourney() {
           if (personas.length === 0) return;

           const currentPersona = personas[currentPersonaIndex];
           const phasesContainer = document.getElementById('journeyPhases');

           phasesContainer.innerHTML = currentPersona.journey.map(phase => `
               <div class="phase">
                   <div class="phase-header">
                       <h3>${phase.name}</h3>
                       <p>${phase.description}</p>
                   </div>
                   <div class="phase-content">
                       <div class="section">
                           <h4>🎯 Touchpoints</h4>
                           ${phase.touchpoints && phase.touchpoints.length
                               ? phase.touchpoints.map(item => `<div class="touchpoint">${item}</div>`).join('')
                               : '<p style="color: #999; font-style: italic;">No touchpoints defined</p>'}
                       </div>
                
                       <div class="section">
                           <h4>👆 Actions</h4>
                           ${phase.actions && phase.actions.length
                           ? phase.actions.map(action => `<div class="action">${action}</div>`).join('')
                           : '<p style="color: #999; font-style: italic;">No actions defined</p>'}
                       </div>

                       <div class="section">
                           <h4>💭 Emotions</h4>
                           ${phase.emotions && phase.emotions.length
                               ? phase.emotions.map(emotion => `<div class="emotion">${emotion}</div>`).join('')
                               : '<p style="color: #999; font-style: italic;">No emotions defined</p>'}
                       </div>

                       <div class="section">
                           <h4>🚧 Pain Points</h4>
                           ${phase.painPoints && phase.painPoints.length
                               ? phase.painPoints.map(pain => `<div class="pain-point">${pain}</div>`).join('')
                               : '<p style="color: #999; font-style: italic;">No pain points defined</p>'}
                       </div>
                    </div>
                </div>
           `).join('');
        }

        window.onload = init;
    </script>
</body>
